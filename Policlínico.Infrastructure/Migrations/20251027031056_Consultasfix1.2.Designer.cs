// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Policlínico.Infrastructure.Data;

#nullable disable

namespace Policlínico.Infrastructure.Migrations
{
    [DbContext(typeof(PoliclínicoDbContext))]
    [Migration("20251027031056_Consultasfix1.2")]
    partial class Consultasfix12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Policlínico.Domain.Entities.Asignacion", b =>
                {
                    b.Property<int>("IdAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_asignacion");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAsignacion"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio");

                    b.Property<int>("TrabajadorId")
                        .HasColumnType("integer")
                        .HasColumnName("trabajador_id");

                    b.HasKey("IdAsignacion");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("TrabajadorId");

                    b.ToTable("Asignaciones");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Consulta", b =>
                {
                    b.Property<int>("IdConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_consulta");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdConsulta"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("text")
                        .HasColumnName("diagnostico");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaConsulta")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_consulta");

                    b.Property<int>("MedicoAtendioId")
                        .HasColumnType("integer")
                        .HasColumnName("medico_atendio_id");

                    b.Property<int>("MedicoPrincipalId")
                        .HasColumnType("integer")
                        .HasColumnName("medico_principal_id");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_consulta");

                    b.HasKey("IdConsulta");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("MedicoAtendioId");

                    b.HasIndex("MedicoPrincipalId");

                    b.ToTable("Consultas");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("IdDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_departamento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDepartamento"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("estado");

                    b.Property<int?>("JefeId")
                        .HasColumnType("integer")
                        .HasColumnName("jefe_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.HasKey("IdDepartamento");

                    b.HasIndex("JefeId");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.EntregaMedicamento", b =>
                {
                    b.Property<int>("IdEntrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_entrega");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEntrega"));

                    b.Property<int>("DepartamentoDestinoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_destino_id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_entrega");

                    b.Property<int?>("JefeAlmacenId")
                        .HasColumnType("integer")
                        .HasColumnName("jefe_almacen_id");

                    b.HasKey("IdEntrega");

                    b.HasIndex("DepartamentoDestinoId");

                    b.HasIndex("JefeAlmacenId");

                    b.ToTable("EntregasMedicamentos");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.EntregaMedicamentoDetalle", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDetalle"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("EntregaId")
                        .HasColumnType("integer")
                        .HasColumnName("entrega_id");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("medicamento_id");

                    b.HasKey("IdDetalle");

                    b.HasIndex("EntregaId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("EntregaMedicamentoDetalles");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_paciente");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("Contacto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contacto");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("direccion");

                    b.Property<int>("Edad")
                        .HasColumnType("integer")
                        .HasColumnName("edad");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("NumeroIdentidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero_identidad");

                    b.HasKey("IdPaciente");

                    b.HasIndex("NumeroIdentidad")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.PedidoConsulta", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pedido");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPedido"));

                    b.Property<int>("ConsultaId")
                        .HasColumnType("integer")
                        .HasColumnName("consulta_id");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_pedido");

                    b.HasKey("IdPedido");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("PedidosConsultas");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.PedidoConsultaDetalle", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDetalle"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("medicamento_id");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("pedido_id");

                    b.HasKey("IdDetalle");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("PedidoId");

                    b.ToTable("PedidoConsultaDetalles");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Remision", b =>
                {
                    b.Property<int>("IdRemision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_remision");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRemision"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_que_atiende_id");

                    b.Property<DateTime>("FechaConsulta")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_consulta");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("PacienteId")
                        .HasColumnType("integer")
                        .HasColumnName("paciente_id");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_remision");

                    b.HasKey("IdRemision");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Remisiones");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.SolicitudMedicamento", b =>
                {
                    b.Property<int>("IdSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_solicitud");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSolicitud"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_solicitud");

                    b.Property<int?>("JefeDepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("jefe_departamento_id");

                    b.HasKey("IdSolicitud");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("JefeDepartamentoId");

                    b.ToTable("SolicitudesMedicamentos");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.SolicitudMedicamentoDetalle", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDetalle"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("medicamento_id");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("integer")
                        .HasColumnName("solicitud_id");

                    b.HasKey("IdDetalle");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("SolicitudId");

                    b.ToTable("SolicitudMedicamentoDetalles");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Stock", b =>
                {
                    b.Property<int>("IdStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_stock");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStock"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.HasKey("IdStock");

                    b.HasIndex("DepartamentoId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.StockMedicamento", b =>
                {
                    b.Property<int>("IdStockMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_stock_medicamento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStockMedicamento"));

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_disponible");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("medicamento_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.HasKey("IdStockMedicamento");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("StockId");

                    b.ToTable("StockMedicamentos");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Trabajador", b =>
                {
                    b.Property<int>("IdTrabajador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_trabajador");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTrabajador"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cargo");

                    b.Property<string>("EstadoLaboral")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("estado_laboral");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTrabajador");

                    b.ToTable("Trabajadores");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.ConsultaEmergencia", b =>
                {
                    b.HasBaseType("Policlínico.Domain.Entities.Consulta");

                    b.Property<int>("PacienteId")
                        .HasColumnType("integer")
                        .HasColumnName("paciente_id");

                    b.HasIndex("PacienteId");

                    b.ToTable("ConsultasEmergencia", (string)null);
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.ConsultaProgramada", b =>
                {
                    b.HasBaseType("Policlínico.Domain.Entities.Consulta");

                    b.Property<int>("RemisionId")
                        .HasColumnType("integer")
                        .HasColumnName("remision_id");

                    b.HasIndex("RemisionId");

                    b.ToTable("ConsultasProgramadas", (string)null);
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.RemisionExterna", b =>
                {
                    b.HasBaseType("Policlínico.Domain.Entities.Remision");

                    b.Property<string>("MotivoExterno")
                        .HasColumnType("text")
                        .HasColumnName("motivo_externo");

                    b.ToTable("RemisionesExternas", (string)null);
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.RemisionInterna", b =>
                {
                    b.HasBaseType("Policlínico.Domain.Entities.Remision");

                    b.Property<int>("DepartamentoOrigenId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_origen_id");

                    b.Property<string>("MotivoInterno")
                        .HasColumnType("text")
                        .HasColumnName("motivo_interno");

                    b.ToTable("RemisionesInternas", (string)null);
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Asignacion", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Asignaciones")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Trabajador", "Trabajador")
                        .WithMany("Asignaciones")
                        .HasForeignKey("TrabajadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Trabajador");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Consulta", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Trabajador", "MedicoAtendio")
                        .WithMany()
                        .HasForeignKey("MedicoAtendioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Trabajador", "MedicoPrincipal")
                        .WithMany()
                        .HasForeignKey("MedicoPrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("MedicoAtendio");

                    b.Navigation("MedicoPrincipal");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Trabajador", "Jefe")
                        .WithMany()
                        .HasForeignKey("JefeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Jefe");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.EntregaMedicamento", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Departamento", "DepartamentoDestino")
                        .WithMany()
                        .HasForeignKey("DepartamentoDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Trabajador", "JefeAlmacen")
                        .WithMany()
                        .HasForeignKey("JefeAlmacenId");

                    b.Navigation("DepartamentoDestino");

                    b.Navigation("JefeAlmacen");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.EntregaMedicamentoDetalle", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.EntregaMedicamento", "Entrega")
                        .WithMany("Detalles")
                        .HasForeignKey("EntregaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrega");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.PedidoConsulta", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.PedidoConsultaDetalle", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.PedidoConsulta", "Pedido")
                        .WithMany("Detalles")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Remision", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.SolicitudMedicamento", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Trabajador", "JefeDepartamento")
                        .WithMany()
                        .HasForeignKey("JefeDepartamentoId");

                    b.Navigation("Departamento");

                    b.Navigation("JefeDepartamento");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.SolicitudMedicamentoDetalle", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.SolicitudMedicamento", "Solicitud")
                        .WithMany("Detalles")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Stock", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Departamento", "Departamento")
                        .WithOne("Stock")
                        .HasForeignKey("Policlínico.Domain.Entities.Stock", "DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.StockMedicamento", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Stock", "Stock")
                        .WithMany("StockMedicamentos")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.ConsultaEmergencia", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Consulta", null)
                        .WithOne()
                        .HasForeignKey("Policlínico.Domain.Entities.ConsultaEmergencia", "IdConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.ConsultaProgramada", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Consulta", null)
                        .WithOne()
                        .HasForeignKey("Policlínico.Domain.Entities.ConsultaProgramada", "IdConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Policlínico.Domain.Entities.Remision", "Remision")
                        .WithMany()
                        .HasForeignKey("RemisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remision");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.RemisionExterna", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Remision", null)
                        .WithOne()
                        .HasForeignKey("Policlínico.Domain.Entities.RemisionExterna", "IdRemision")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.RemisionInterna", b =>
                {
                    b.HasOne("Policlínico.Domain.Entities.Remision", null)
                        .WithOne()
                        .HasForeignKey("Policlínico.Domain.Entities.RemisionInterna", "IdRemision")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Asignaciones");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.EntregaMedicamento", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.PedidoConsulta", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.SolicitudMedicamento", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Stock", b =>
                {
                    b.Navigation("StockMedicamentos");
                });

            modelBuilder.Entity("Policlínico.Domain.Entities.Trabajador", b =>
                {
                    b.Navigation("Asignaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
